========================================================================
TODO
========================================================================
0.9 :
- Per-object visibility flag (defaults to 1): <object visible="0|1">

0.11:
- Added an id attribute to the object element, which stores a map-unique ID of the object.

- Added a nextobjectid attribute to the map element, which stores the next available ID for new objects. This number is stored to prevent reuse of the same ID after objects have been removed.

0.13 :
- Added an optional tilecount attribute to the tileset element, which is written by Tiled to help parsers determine the amount of memory to allocate for tile data.

- The pure XML and Gzip-compressed tile layer data formats were deprecated, since they didn't have any advantage over other formats. Remaining formats are CSV, base64 and Zlib-compressed layer data.

0.15:
- Added columns attribute to the tileset element, which specifies the number of tile columns in the tileset. For image collection tilesets it is editable and is used when displaying the tileset.

0.16 :
- The property element gained a type attribute, storing the type of the value. Currently supported types are string (the default), int, float and bool.


========================================================================
DONE
========================================================================
0.8 :
- Support for tile rotation in 90-degree increments was added by using the third most significant bit in the global tile id. This new bit means "anti-diagonal flip", which swaps the x and y axis when rendering a tile.

0.9 :
- background color

0.10 :
- The render order of the tiles on tile layers can be configured in a number of ways through a new renderorder property on the map element. Valid values are right-down (the default), right-up, left-down and left-up. In all cases, the map is drawn row-by-row. This is only supported for orthogonal maps at the moment.

- The render order of objects on object layers can be configured to be either sorted by their y-coordinate (previous behavior and still the default) or simply the order of appearance in the map file. The latter enables manual control over the drawing order with actions that "Raise" and "Lower" selected objects. It is controlled by the draworder property on the objectgroup element, which can be either topdown (default) or index.

- Tile objects can now be horizontally or vertically flipped

- Objects can be rotated freely

- Tiles can have a single looping animation associated with them using an animation child element. Each frame of the animation refers to a local tile ID from this tileset and defines the frame duration in milliseconds.

- Tiles can have an objectgroup child element, which can contain objects that define the collision shape to use for that tile. This information can be edited in the new Tile Collision Editor.

0.11 :
- Added hexagonal to the supported values for the orientation attribute on the map element. This also adds staggerindex (even or odd) and staggeraxis (x or y) and hexsidelength (integer value) attributes to the map element, in order to support the many variations of staggered hexagonal. The new staggerindex and staggeraxis attributes are also supported when using the staggered map orientation.

0.12 :
- Previously tile objects never had width and height properties, though the format technically allowed this. Now these properties are used to store the size the image should be rendered at. The default values for these attributes are the dimensions of the tile image.

0.14 :
- Added optional offsetx and offsety attributes to the layer and objectgroup elements. These specify an offset in pixels that is to be applied when rendering the layer. The default values are 0

0.15 :
- The offsetx and offsety attributes are now also used for imagelayer elements, replacing the x and y attributes previously used. This change was made for consistency with the other layer types.
- The backgroundcolor attribute of the map element will now take the format #AARRGGBB when its alpha value differs from 255. Previously the alpha value was silently discarded
